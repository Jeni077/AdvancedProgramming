//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AdvancedProgramming.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TaskEntities : DbContext
    {
        public TaskEntities()
            : base("name=TaskEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<TaskHistory> TaskHistories { get; set; }
        public virtual DbSet<TaskLog> TaskLogs { get; set; }
        public virtual DbSet<TaskQueue> TaskQueues { get; set; }
        public virtual DbSet<Task> Tasks { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<QueueStatu> QueueStatus { get; set; }
    
        public virtual int AddTaskToQueue(Nullable<int> taskId, Nullable<System.DateTime> executionDate, string priority)
        {
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("TaskId", taskId) :
                new ObjectParameter("TaskId", typeof(int));
    
            var executionDateParameter = executionDate.HasValue ?
                new ObjectParameter("ExecutionDate", executionDate) :
                new ObjectParameter("ExecutionDate", typeof(System.DateTime));
    
            var priorityParameter = priority != null ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddTaskToQueue", taskIdParameter, executionDateParameter, priorityParameter);
        }
    }
}
